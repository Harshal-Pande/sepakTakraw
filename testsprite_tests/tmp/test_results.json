[
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "844b5048-6e5b-40d4-b6d2-e838b3df22d1",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC001-Player Registration Successful Completion",
    "description": "Verify that a user can successfully complete the two-step player registration flow, generating a unique reference number and storing data accurately.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'PLAYER REGISTRATION' to navigate to player registration step 1 page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[7]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid full name and email, then submit to generate unique reference number\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('John Doe')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/div[2]/form/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('johndoe@example.com')\n        \n\n        # Click the 'Generate Reference Number' button to submit the form and generate the unique reference number\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The player registration flow cannot be completed because the system fails to generate a unique reference number at step 1. The error message 'Failed to generate reference number' is shown after submitting valid details. Further testing is stopped and the issue is reported for resolution.\nBrowser Console Logs:\n[WARNING] Image with src \"https://images.unsplash.com/photo-1502877338535-766e1452684a?q=80&w=1920&auto=format&fit=crop\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.\nRead more: https://nextjs.org/docs/api-reference/next/image#priority (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/player-registration/step1:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362865671996//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.455Z",
    "modified": "2025-10-13T13:41:05.896Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "99f75a57-4f45-4e88-bc02-88e6919434cc",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC002-Player Registration Validation Errors",
    "description": "Check that invalid or missing inputs during player registration trigger proper validation errors on both steps.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'PLAYER REGISTRATION' link to navigate to player registration step 1 page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[7]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Submit the form with empty fields to check validation errors.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div/div/div/img').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Validation errors not as expected or test plan execution failed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Validation errors are not triggered on player registration step 1 when submitting empty or malformed inputs. The form submission navigates away without error messages, indicating a critical validation issue. Stopping further testing until this is fixed.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"https://images.unsplash.com/photo-1502877338535-766e1452684a?q=80&w=1920&auto=format&fit=crop\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.\nRead more: https://nextjs.org/docs/api-reference/next/image#priority (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: net::ERR_INSUFFICIENT_RESOURCES (at http://localhost:3000/_next/image?url=https%3A%2F%2Fimages.unsplash.com%2Fphoto-1571019613454-1cb2f99b2d8b%3Fw%3D1200%26h%3D600%26fit%3Dcrop&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362807954933//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.461Z",
    "modified": "2025-10-13T13:40:08.091Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "e0af7560-12fa-4739-992f-c633472a3e34",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC003-Admin Login and Authentication",
    "description": "Verify that admins can log in via the admin login page with correct credentials, and that access to admin routes is restricted based on authentication.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to admin login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: generic failure assertion as expected result is unknown'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The admin login page or admin routes are not accessible. Clicking the GOVERNANCE link leads to a 404 error page. Unable to verify admin login functionality or access restrictions. The issue has been reported and testing is stopped as per instructions.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=vusbg:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362768632645//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.467Z",
    "modified": "2025-10-13T13:39:28.854Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "4bc2c53b-f175-4f59-9893-27e2dd8633d2",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC004-Admin Dashboard CRUD Operations on News",
    "description": "Confirm that admin users can create, read, update and delete news items via the admin dashboard and API, and changes reflect on the public news pages.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the admin login or dashboard link to log in as admin\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click on the NEWS link to go to news section\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[6]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to admin login or dashboard to log in as admin\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin login or dashboard page is not accessible from the homepage. The site redirects to an unrelated sports federation homepage (Sepaktakraw Sports Federation) instead of the expected admin interface. This blocks the ability to perform CRUD operations on news items as required by the task. Further testing cannot proceed without admin access.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362902932006//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.494Z",
    "modified": "2025-10-13T13:41:43.186Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "a47e52fc-b7d7-48d4-a349-c63de49dcaa3",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC005-Events Public Listing and Registration",
    "description": "Validate that events are listed properly on public pages, event details show correctly, and users can register for an event via the event registration form.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the 'View All Events' link to navigate to the public events listing page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/section[4]/div/div/div[2]/div/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down or locate the event registration form and fill it with valid data to register for the event.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Scroll down further or search the page for the event registration form to fill with valid data.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Go back to the events listing page to check if registration is available from there or try another event detail page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'View Event Details' link for the first upcoming event to verify event details and registration form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div[2]/div[2]/div[2]/div[3]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down the page to check if the registration form is located further below or hidden in a collapsible section.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click the 'Back to Events' button to return to the events listing page and try another event or check for registration options there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'View Event Details' link for the event titled 'pande ji ki shadi' to verify event details and check for registration form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div[2]/div[2]/div/div[3]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down the page to check if the registration form is located further below or hidden in a collapsible section.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click the 'Back to Events' button to return to the events listing page and try another event or check for registration options there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The events listing and event detail pages display event information correctly, including date, location, description, and media. However, the event registration form is not present on any event detail page tested, including 'Event B' and 'pande ji ki shadi'. This prevents testing of event registration functionality and validation. The absence of the registration form is a critical issue that blocks completion of the registration testing steps.\nBrowser Console Logs:\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760363110479267//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.501Z",
    "modified": "2025-10-13T13:45:10.665Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "dc91a08a-bab1-4049-b816-e717080165e6",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC006-Admin Event CRUD with Media Upload",
    "description": "Ensure admins can create, read, update, and delete events including uploading media files such as images, and changes are reflected publicly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click on login or admin access to log in as admin.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Look for admin login or event management page link to log in as admin.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[2]/ul/li[4]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to find admin login or event management page link elsewhere on the site or report issue if not found.\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to access common admin URLs directly or report the issue if no access found.\n        await page.goto('http://localhost:3000/admin', timeout=10000)\n        \n\n        # Input admin credentials and sign in to access admin dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin login failed due to invalid credentials, preventing access to event management page. Unable to proceed with testing CRUD operations on events and media uploads. Task stopped.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[WARNING] The resource http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally. (at http://localhost:3000/:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[WARNING] The resource http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally. (at http://localhost:3000/:0:0)\n[WARNING] The resource http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally. (at http://localhost:3000/:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[WARNING] The resource http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally. (at http://localhost:3000/:0:0)\n[WARNING] The resource http://localhost:3000/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally. (at http://localhost:3000/general-body:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362948783938//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.508Z",
    "modified": "2025-10-13T13:42:28.964Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "fafd06c1-bda6-47b9-8b18-1ea2fe9cfd8e",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC007-Elections Management CRUD by Admin",
    "description": "Verify that election cycles and candidate info can be created, edited, viewed, and deleted by admins via the dashboard and APIs.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Elections' link to go to elections management page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/section[5]/div/div[2]/div[3]/div/img').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Elections' link (index 54) to navigate to elections management page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[4]/ul/li[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the button or link to create a new election.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[9]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to check for any hidden controls or buttons for creating, editing, or deleting elections.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Reported missing election management controls on the elections page. Cannot proceed with testing creation, editing, viewing, and deletion of elections due to lack of UI elements. Stopping further testing.\nBrowser Console Logs:\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362945809251//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.514Z",
    "modified": "2025-10-13T13:42:26.006Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "67468ac9-e6fa-4cee-b593-82e0c9f01170",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC008-Anti-Doping Guidelines Public View and Admin Management",
    "description": "Confirm that anti-doping guidelines documents and content are viewable on public pages and editable by admins through CRUD operations.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the 'Anti-DOP Guidelines' link to visit the anti-doping guidelines public page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/section[5]/div/div[2]/div/div[3]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Anti-DOP Guidelines' link (index 20) in the quick links section to navigate to the anti-doping guidelines public page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[3]/ul/li[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the document viewer button for 'WADA Code 2024' (index 10) to verify the PDF/document loads properly\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[3]/div/div/div[2]/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Test the document viewer functionality by clicking the 'Prohibited List 2024' document viewer button (index 11) to check if the PDF/document loads properly\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[3]/div/div/div[2]/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Document viewer functionality on the anti-doping guidelines public page is broken. Clicking document viewer buttons does not open or display the documents. Further testing of public document viewing and admin CRUD operations cannot proceed until this issue is fixed.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362991822966//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.519Z",
    "modified": "2025-10-13T13:43:12.011Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "527d3638-c29b-4d01-8b93-874823cca34d",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC009-History and General Body Content Management",
    "description": "Validate that static content sections for history and general body are editable by admins, served via API, and render correctly on public pages.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click login or admin access to login as admin\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/section[5]/div/div[2]/div[2]/div[3]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to homepage or main page to find login or admin access\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Look for login or admin access link or button on this page or navigate to homepage to find it.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to homepage or main page to find login or admin access\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'History' link to check if it leads to editable content or admin login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[4]/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to admin login page to login as admin for editing history content.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[4]/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Search for admin login or content management access on the site, possibly in header, footer, or common admin URLs.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[4]/ul/li[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to access common admin login URLs directly to find admin interface for editing content.\n        await page.goto('http://localhost:3000/admin', timeout=10000)\n        \n\n        # Input admin credentials and sign in to access admin dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Admin login failed due to invalid credentials, preventing access to the admin dashboard. Therefore, it is not possible to verify if the static content sections for history and general body are editable by admins, served via API, and render correctly on public pages. The task cannot be completed as specified due to lack of admin access.\nBrowser Console Logs:\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=bnp6d:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760363252045092//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.525Z",
    "modified": "2025-10-13T13:47:32.257Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "1dcf5c7b-3530-453b-9bed-412fd5fd63c0",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC010-Hero Images and File Manager Upload and Display",
    "description": "Ensure admins can upload, browse and manage hero images and files via the file manager, and these media files are served correctly on public pages.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click login or admin access link to log in as admin.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[7]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to find admin login or hero image management link elsewhere on the homepage or try direct URL access.\n        await page.goto('http://localhost:3000/admin', timeout=10000)\n        \n\n        # Input admin email and password, then click Sign In button to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[2]/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with the task because the provided admin credentials are invalid, preventing access to the admin dashboard and hero image management. Please provide valid admin login credentials to continue testing the upload, browse, and management of hero images and files.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[WARNING] Image with src \"https://images.unsplash.com/photo-1502877338535-766e1452684a?q=80&w=1920&auto=format&fit=crop\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.\nRead more: https://nextjs.org/docs/api-reference/next/image#priority (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/verify:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/176036288856894//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.531Z",
    "modified": "2025-10-13T13:41:28.704Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "cbf79efc-0036-496e-8f58-ab11f18d318e",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC011-Results and Statistics Display and Admin Input",
    "description": "Check that results and stats are presented correctly to public users and that admins can input or update this data effectively.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on the 'Results' link to visit the results and statistics public page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/section[4]/div/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'Results' link (index 35) in the navigation menu to go to the results and statistics public page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[2]/ul/li[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to check for more results and verify formatting of all results and statistics data.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Navigate to admin login page to test admin input and update capabilities for results and statistics.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[7]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Search for an admin login link in the footer or other navigation areas, or report the issue if not found.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The public results and statistics page was verified to display data correctly. However, the admin login page or link is not accessible from the public site, preventing testing of admin input and update capabilities. This is a critical issue that needs resolution to complete the task.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362932464844//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.537Z",
    "modified": "2025-10-13T13:42:12.664Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "49aa6c26-6825-4d96-9e0c-aaab2f6515e1",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC012-Site-wide Search and Quick Links Functionality",
    "description": "Verify that site-wide search returns relevant results from news, events, documents, and quick links provide curated navigation shortcuts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Locate the site-wide search box and enter a search query to test results.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Locate the site-wide search box, possibly by scrolling up or searching the header area.\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        # Look for a search icon, button, or input field in the header or navigation area to enter a search query.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[9]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Test quick links from the homepage or footer to verify they navigate to correct pages and content.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected results unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to missing site-wide search functionality and broken navigation links leading to 404 errors. The site content is inconsistent and does not allow verification of search results or quick links. Please fix these critical issues before retesting.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=vusbg:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362997342601//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.543Z",
    "modified": "2025-10-13T13:43:17.655Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "467b5861-aee2-4539-8904-42938ebefffa",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC013-Responsive Design Across Devices",
    "description": "Ensure the website layout, components, and navigation adapt correctly and remain usable on desktop, tablet, and mobile screen sizes.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Resize window to tablet size and reload the page to verify UI adaptation and navigation accessibility.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.mouse.wheel(0, 500)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.mouse.wheel(0, 1000)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.mouse.wheel(0, 1000)\n        \n\n        # Resize the window to tablet size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.mouse.wheel(0, -2000)\n        \n\n        # Resize the browser window to tablet screen size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize the browser window to tablet screen size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Resize the browser window to tablet screen size and reload the page to verify UI components adapt and navigation remains accessible.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The website layout, components, and navigation have been verified on desktop screen size with no broken UI elements. The navigation menu and content are accessible and visually intact. However, the steps to resize the window to tablet size and reload, as well as testing on mobile device or emulator, were not performed. Therefore, the task is only partially complete with desktop responsiveness confirmed but tablet and mobile responsiveness not yet verified.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760363334492139//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.549Z",
    "modified": "2025-10-13T13:48:54.678Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "bef1b4ce-1fda-4291-9dd6-423064159f40",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC014-Navigation Links and URL Verification",
    "description": "Validate that all navigation links in the navbar, footer, and quick links function correctly and lead to the proper pages with correct URLs and active highlights.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click the first navigation bar link 'INDIA ALL INDIA FOOTBALL FEDERATION' (index 0) to validate URL and active highlight.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try clicking the second navigation bar link 'GOVERNANCE' (index 1) to check if it navigates correctly and updates URL and active highlight.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Navigation link validation stopped due to multiple broken links causing navigation failures and 404 errors. Detailed issue reported for developer action.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=vusbg:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362846006284//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.554Z",
    "modified": "2025-10-13T13:40:46.150Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "a1491ae2-5404-48c7-9e0f-7cf5c510e79f",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC015-Form Input Validation Across Site",
    "description": "Check that all forms on the site including registration, event registration, admin forms validate inputs correctly with appropriate error messages and success confirmations.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'PLAYER REGISTRATION' link to open the player registration form\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li[7]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Submit the player registration form with empty inputs to check validation errors\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div/div/div/img').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to event registration form to test validation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/footer/div/div/div[2]/ul/li[3]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'View Event Details' for the first upcoming event to find the event registration form\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div[2]/div[2]/div/div[3]/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to find the event registration form or button to open it\n        await page.mouse.wheel(0, 600)\n        \n\n        # Scroll further down or extract content to find event registration form or registration button\n        await page.mouse.wheel(0, 600)\n        \n\n        # Navigate back to main events page to try alternative way to access event registration form or report issue if not found\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Use the search input to look for 'event registration' to try to locate the event registration form\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('event registration')\n        \n\n        # Click on the first search result or relevant link that might lead to the event registration form\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div[2]/div/div/div/div/div/div[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to locate any admin forms by navigating to the admin or governance section to test their validation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing of forms on the site is incomplete due to several issues: The player registration form allows submission with empty inputs without showing validation errors, indicating missing or improper validation. The event registration form could not be located despite navigation and search attempts. The admin forms are inaccessible as the GOVERNANCE link leads to a 404 error page. These issues prevent full validation testing of all forms on the site.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=bnp6d:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/17603631802652//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.560Z",
    "modified": "2025-10-13T13:46:20.474Z"
  },
  {
    "projectId": "b70806e7-8975-4ab8-a1c5-cd6e73248d3a",
    "testId": "d54ebf58-0099-415e-bcee-7a12e2ee582d",
    "userId": "f4589438-4081-705d-bad2-398f871dff07",
    "title": "TC016-No Broken Links, Images or JS Console Errors",
    "description": "Navigate through the entire public site and admin pages verifying no broken links, missing images, or JavaScript console errors appear.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down to load more page content and check for broken links and images further down the homepage.\n        await page.mouse.wheel(0, 1000)\n        \n\n        # Click on the 'GOVERNANCE' link to navigate to that page and check for broken links, images, and console errors.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div[2]/nav/ul/li/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical broken link on 'GOVERNANCE' page resulting in 404 error. No further navigation performed. Please fix the broken link to continue testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FAFC.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[WARNING] Image with src \"https://images.unsplash.com/photo-1502877338535-766e1452684a?q=80&w=1920&auto=format&fit=crop\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.\nRead more: https://nextjs.org/docs/api-reference/next/image#priority (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrNirmalMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIstar.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FGujju.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FDrRakshaHMMungra.jpg&w=96&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance?_rsc=vusbg:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/governance:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFootballSportsDevelopment.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FPerformatxActivewear.jpg&w=128&q=75:0:0)\n[WARNING] Image with src \"/logos/sepak.png\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes (at http://localhost:3000/_next/static/chunks/41c91_next_dist_c786c50f._.js:968:20)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FNivia.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FIndiGo.jpg&w=128&q=75:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 (Bad Request) (at http://localhost:3000/_next/image?url=%2Flogos%2FFIFA.jpg&w=128&q=75:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4589438-4081-705d-bad2-398f871dff07/1760362774016524//tmp/test_task/result.webm",
    "created": "2025-10-13T13:35:59.567Z",
    "modified": "2025-10-13T13:39:34.172Z"
  }
]
